/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: {
                    returnUrl?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        username?: string;
                        password?: string;
                        rememberMe?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v5/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                    sortKey?: string;
                    sortDirection?: components["schemas"]["SortDirection"];
                    level?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogResourcePagingResource"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PingResource"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PingResource"];
                    };
                };
            };
        };
        patch?: never;
        trace?: never;
    };
    "/api/v5/series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    tvdbId?: number;
                    includeSeasonImages?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SeriesResource"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SeriesResource"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SeriesResource"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v5/series/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    includeSeasonImages?: boolean;
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SeriesResource"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: {
                    moveFiles?: boolean;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SeriesResource"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SeriesResource"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: {
                    deleteFiles?: boolean;
                    addImportListExclusion?: boolean;
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v5/series/{id}/folder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v5/series/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    term?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SeriesResource"][];
                        "application/json": components["schemas"]["SeriesResource"][];
                        "text/json": components["schemas"]["SeriesResource"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v5/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateResource"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v5/settings/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UpdateSettingsResource"];
                        "application/json": components["schemas"]["UpdateSettingsResource"];
                        "text/json": components["schemas"]["UpdateSettingsResource"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateSettingsResource"];
                    "text/json": components["schemas"]["UpdateSettingsResource"];
                    "application/*+json": components["schemas"]["UpdateSettingsResource"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UpdateSettingsResource"];
                        "application/json": components["schemas"]["UpdateSettingsResource"];
                        "text/json": components["schemas"]["UpdateSettingsResource"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v5/settings/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateSettingsResource"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddSeriesOptions: {
            ignoreEpisodesWithFiles?: boolean;
            ignoreEpisodesWithoutFiles?: boolean;
            monitor?: components["schemas"]["MonitorTypes"];
            searchForMissingEpisodes?: boolean;
            searchForCutoffUnmetEpisodes?: boolean;
        };
        AlternateTitleResource: {
            title?: string | null;
            /** Format: int32 */
            seasonNumber?: number | null;
            /** Format: int32 */
            sceneSeasonNumber?: number | null;
            sceneOrigin?: string | null;
            comment?: string | null;
        };
        Language: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        LogResource: {
            /** Format: int32 */
            id?: number;
            /** Format: date-time */
            time?: string;
            exception?: string | null;
            exceptionType?: string | null;
            level: string | null;
            logger: string | null;
            message: string | null;
        };
        LogResourcePagingResource: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            pageSize?: number;
            sortKey?: string | null;
            sortDirection?: components["schemas"]["SortDirection"];
            /** Format: int32 */
            totalRecords?: number;
            records?: components["schemas"]["LogResource"][] | null;
        };
        MediaCover: {
            coverType?: components["schemas"]["MediaCoverTypes"];
            url?: string | null;
            remoteUrl?: string | null;
        };
        /** @enum {string} */
        MediaCoverTypes: "unknown" | "poster" | "banner" | "fanart" | "screenshot" | "headshot" | "clearlogo";
        /** @enum {string} */
        MonitorTypes: "unknown" | "all" | "future" | "missing" | "existing" | "firstSeason" | "lastSeason" | "latestSeason" | "pilot" | "recent" | "monitorSpecials" | "unmonitorSpecials" | "none" | "skip";
        /** @enum {string} */
        NewItemMonitorTypes: "all" | "none";
        PingResource: {
            status?: string | null;
        };
        Ratings: {
            /** Format: int32 */
            votes?: number;
            /** Format: double */
            value?: number;
        };
        SeasonResource: {
            /** Format: int32 */
            seasonNumber?: number;
            monitored?: boolean;
            statistics?: components["schemas"]["SeasonStatisticsResource"];
            images?: components["schemas"]["MediaCover"][] | null;
        };
        SeasonStatisticsResource: {
            /** Format: date-time */
            nextAiring?: string | null;
            /** Format: date-time */
            previousAiring?: string | null;
            /** Format: int32 */
            episodeFileCount?: number;
            /** Format: int32 */
            episodeCount?: number;
            /** Format: int32 */
            totalEpisodeCount?: number;
            /** Format: int64 */
            sizeOnDisk?: number;
            releaseGroups?: string[] | null;
            /** Format: double */
            readonly percentOfEpisodes?: number;
        };
        SeriesResource: {
            /** Format: int32 */
            id?: number;
            title?: string | null;
            alternateTitles?: components["schemas"]["AlternateTitleResource"][] | null;
            sortTitle?: string | null;
            status?: components["schemas"]["SeriesStatusType"];
            readonly ended?: boolean;
            profileName?: string | null;
            overview?: string | null;
            /** Format: date-time */
            nextAiring?: string | null;
            /** Format: date-time */
            previousAiring?: string | null;
            network?: string | null;
            airTime?: string | null;
            images?: components["schemas"]["MediaCover"][] | null;
            originalLanguage?: components["schemas"]["Language"];
            remotePoster?: string | null;
            seasons?: components["schemas"]["SeasonResource"][] | null;
            /** Format: int32 */
            year?: number;
            path?: string | null;
            /** Format: int32 */
            qualityProfileId?: number;
            seasonFolder?: boolean;
            monitored?: boolean;
            monitorNewItems?: components["schemas"]["NewItemMonitorTypes"];
            useSceneNumbering?: boolean;
            /** Format: int32 */
            runtime?: number;
            /** Format: int32 */
            tvdbId?: number;
            /** Format: int32 */
            tvRageId?: number;
            /** Format: int32 */
            tvMazeId?: number;
            /** Format: int32 */
            tmdbId?: number;
            /** Format: date-time */
            firstAired?: string | null;
            /** Format: date-time */
            lastAired?: string | null;
            seriesType?: components["schemas"]["SeriesTypes"];
            cleanTitle?: string | null;
            imdbId?: string | null;
            titleSlug?: string | null;
            rootFolderPath?: string | null;
            folder?: string | null;
            certification?: string | null;
            genres?: string[] | null;
            tags?: number[] | null;
            /** Format: date-time */
            added?: string;
            addOptions?: components["schemas"]["AddSeriesOptions"];
            ratings?: components["schemas"]["Ratings"];
            statistics?: components["schemas"]["SeriesStatisticsResource"];
            episodesChanged?: boolean | null;
        };
        SeriesStatisticsResource: {
            /** Format: int32 */
            seasonCount?: number;
            /** Format: int32 */
            episodeFileCount?: number;
            /** Format: int32 */
            episodeCount?: number;
            /** Format: int32 */
            totalEpisodeCount?: number;
            /** Format: int64 */
            sizeOnDisk?: number;
            releaseGroups?: string[] | null;
            /** Format: double */
            readonly percentOfEpisodes?: number;
        };
        /** @enum {string} */
        SeriesStatusType: "continuing" | "ended" | "upcoming" | "deleted";
        /** @enum {string} */
        SeriesTypes: "standard" | "daily" | "anime";
        /** @enum {string} */
        SortDirection: "default" | "ascending" | "descending";
        UpdateChanges: {
            new?: string[] | null;
            fixed?: string[] | null;
        };
        /** @enum {string} */
        UpdateMechanism: "builtIn" | "script" | "external" | "apt" | "docker";
        UpdateResource: {
            /** Format: int32 */
            id?: number;
            version: string | null;
            branch: string | null;
            /** Format: date-time */
            releaseDate?: string;
            fileName: string | null;
            url: string | null;
            installed?: boolean;
            /** Format: date-time */
            installedOn?: string | null;
            installable?: boolean;
            latest?: boolean;
            changes: components["schemas"]["UpdateChanges"];
            hash: string | null;
        };
        UpdateSettingsResource: {
            /** Format: int32 */
            id?: number;
            branch?: string | null;
            updateAutomatically?: boolean;
            updateMechanism?: components["schemas"]["UpdateMechanism"];
            updateScriptPath?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
